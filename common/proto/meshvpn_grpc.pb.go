// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MeshVPNClient is the client API for MeshVPN service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeshVPNClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	ServerConnect(ctx context.Context, in *ServerConnectRequest, opts ...grpc.CallOption) (*ServerConnectReply, error)
	PeerConnect(ctx context.Context, in *PeerConnectRequest, opts ...grpc.CallOption) (*PeerConnectReply, error)
}

type meshVPNClient struct {
	cc grpc.ClientConnInterface
}

func NewMeshVPNClient(cc grpc.ClientConnInterface) MeshVPNClient {
	return &meshVPNClient{cc}
}

func (c *meshVPNClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/meshvpn.MeshVPN/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshVPNClient) ServerConnect(ctx context.Context, in *ServerConnectRequest, opts ...grpc.CallOption) (*ServerConnectReply, error) {
	out := new(ServerConnectReply)
	err := c.cc.Invoke(ctx, "/meshvpn.MeshVPN/ServerConnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshVPNClient) PeerConnect(ctx context.Context, in *PeerConnectRequest, opts ...grpc.CallOption) (*PeerConnectReply, error) {
	out := new(PeerConnectReply)
	err := c.cc.Invoke(ctx, "/meshvpn.MeshVPN/PeerConnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeshVPNServer is the server API for MeshVPN service.
// All implementations must embed UnimplementedMeshVPNServer
// for forward compatibility
type MeshVPNServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	ServerConnect(context.Context, *ServerConnectRequest) (*ServerConnectReply, error)
	PeerConnect(context.Context, *PeerConnectRequest) (*PeerConnectReply, error)
	mustEmbedUnimplementedMeshVPNServer()
}

// UnimplementedMeshVPNServer must be embedded to have forward compatible implementations.
type UnimplementedMeshVPNServer struct {
}

func (UnimplementedMeshVPNServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMeshVPNServer) ServerConnect(context.Context, *ServerConnectRequest) (*ServerConnectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerConnect not implemented")
}
func (UnimplementedMeshVPNServer) PeerConnect(context.Context, *PeerConnectRequest) (*PeerConnectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeerConnect not implemented")
}
func (UnimplementedMeshVPNServer) mustEmbedUnimplementedMeshVPNServer() {}

// UnsafeMeshVPNServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeshVPNServer will
// result in compilation errors.
type UnsafeMeshVPNServer interface {
	mustEmbedUnimplementedMeshVPNServer()
}

func RegisterMeshVPNServer(s grpc.ServiceRegistrar, srv MeshVPNServer) {
	s.RegisterService(&_MeshVPN_serviceDesc, srv)
}

func _MeshVPN_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshVPNServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meshvpn.MeshVPN/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshVPNServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshVPN_ServerConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshVPNServer).ServerConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meshvpn.MeshVPN/ServerConnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshVPNServer).ServerConnect(ctx, req.(*ServerConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeshVPN_PeerConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshVPNServer).PeerConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meshvpn.MeshVPN/PeerConnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshVPNServer).PeerConnect(ctx, req.(*PeerConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MeshVPN_serviceDesc = grpc.ServiceDesc{
	ServiceName: "meshvpn.MeshVPN",
	HandlerType: (*MeshVPNServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _MeshVPN_Ping_Handler,
		},
		{
			MethodName: "ServerConnect",
			Handler:    _MeshVPN_ServerConnect_Handler,
		},
		{
			MethodName: "PeerConnect",
			Handler:    _MeshVPN_PeerConnect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/proto/meshvpn.proto",
}
